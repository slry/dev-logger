create table "public"."api_tokens" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "name" text not null default ''::text,
    "key" uuid not null default gen_random_uuid()
);


alter table "public"."api_tokens" enable row level security;

CREATE UNIQUE INDEX api_tokens_pkey ON public.api_tokens USING btree (id, user_id);

alter table "public"."api_tokens" add constraint "api_tokens_pkey" PRIMARY KEY using index "api_tokens_pkey";

alter table "public"."api_tokens" add constraint "api_tokens_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."api_tokens" validate constraint "api_tokens_user_id_fkey";

grant delete on table "public"."api_tokens" to "anon";

grant insert on table "public"."api_tokens" to "anon";

grant references on table "public"."api_tokens" to "anon";

grant select on table "public"."api_tokens" to "anon";

grant trigger on table "public"."api_tokens" to "anon";

grant truncate on table "public"."api_tokens" to "anon";

grant update on table "public"."api_tokens" to "anon";

grant delete on table "public"."api_tokens" to "authenticated";

grant insert on table "public"."api_tokens" to "authenticated";

grant references on table "public"."api_tokens" to "authenticated";

grant select on table "public"."api_tokens" to "authenticated";

grant trigger on table "public"."api_tokens" to "authenticated";

grant truncate on table "public"."api_tokens" to "authenticated";

grant update on table "public"."api_tokens" to "authenticated";

grant delete on table "public"."api_tokens" to "service_role";

grant insert on table "public"."api_tokens" to "service_role";

grant references on table "public"."api_tokens" to "service_role";

grant select on table "public"."api_tokens" to "service_role";

grant trigger on table "public"."api_tokens" to "service_role";

grant truncate on table "public"."api_tokens" to "service_role";

grant update on table "public"."api_tokens" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."api_tokens"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."api_tokens"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."api_tokens"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



